name: Original Android CI Build

on:
  push:
    branches: ["feat/build-original-version"]
  pull_request:
    branches: ["feat/build-original-version"]

env:
  ANDROID_HOME: /usr/local/lib/android/sdk
  ANDROID_SDK_ROOT: /usr/local/lib/android/sdk

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: gradle

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      # Fallback manual setup if the action fails
      continue-on-error: true

    - name: Manual Android SDK Setup (Fallback)
      if: failure()
      run: |
        echo "Setting up Android SDK manually..."
        sudo mkdir -p $ANDROID_HOME
        sudo chown -R $USER:$USER $ANDROID_HOME
        
        # Download command line tools
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip
        unzip -q commandlinetools-linux-8512546_latest.zip
        mkdir -p $ANDROID_HOME/cmdline-tools/latest
        mv cmdline-tools/* $ANDROID_HOME/cmdline-tools/latest/
        
        # Accept licenses
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
        
        # Install basic SDK components
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platforms;android-28" "build-tools;28.0.3" "platform-tools"

    - name: Verify Android SDK
      run: |
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        ls -la $ANDROID_HOME || echo "ANDROID_HOME directory not found"
        which adb || echo "adb not found in PATH"

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Clean before build
      run: ./gradlew clean

    - name: Build with Gradle
      run: ./gradlew assembleRelease --stacktrace --info

    - name: List all APK output files
      run: |
        echo "=== Comprehensive APK file listing ==="
        echo "Listing entire app/build/outputs directory:"
        find app/build/outputs -name "*.apk" -type f 2>/dev/null || echo "No APK files found in app/build/outputs"
        echo "----"
        echo "Listing app/build/outputs/apk/release:"
        ls -la app/build/outputs/apk/release/ 2>/dev/null || echo "app/build/outputs/apk/release not found"
        echo "----"
        echo "Listing app/build/outputs/apk:"
        ls -la app/build/outputs/apk/ 2>/dev/null || echo "app/build/outputs/apk not found"
        echo "----"
        echo "Full recursive listing of app/build/outputs:"
        ls -R app/build/outputs/ 2>/dev/null || echo "app/build/outputs not found"

    - name: Verify APK exists
      run: |
        APK_UNSIGNED="app/build/outputs/apk/release/app-release-unsigned.apk"
        APK_SIGNED="app/build/outputs/apk/release/app-release.apk"
        
        if [ -f "$APK_UNSIGNED" ]; then
          echo "✓ Found unsigned APK: $APK_UNSIGNED"
          ls -la "$APK_UNSIGNED"
          file "$APK_UNSIGNED"
        elif [ -f "$APK_SIGNED" ]; then
          echo "✓ Found signed APK: $APK_SIGNED"
          ls -la "$APK_SIGNED"
          file "$APK_SIGNED"
        else
          echo "✗ No expected APK files found"
          echo "Looking for any APK files in the build output..."
          find app/build -name "*.apk" -type f || echo "No APK files found anywhere in build directory"
          exit 1
        fi

    - name: Upload APK Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: original-app-release
        path: |
          app/build/outputs/apk/release/app-release*.apk
          app/build/outputs/apk/release/*.apk
        if-no-files-found: error

    - name: Upload Build Logs (on failure)
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          app/build/reports/
          build/reports/
          ~/.gradle/daemon/*/daemon-*.out.log
        if-no-files-found: ignore

    - name: Build Summary
      if: always()
      run: |
        echo "=== Build Summary ==="
        echo "Build Status: ${{ job.status }}"
        echo "Java Version: $(java -version 2>&1 | head -1)"
        echo "Gradle Version: $(./gradlew --version | grep Gradle)"
        if [ -f "app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
          echo "APK Size: $(du -h app/build/outputs/apk/release/app-release-unsigned.apk | cut -f1)"
        fi
        echo "Build completed at: $(date)"
